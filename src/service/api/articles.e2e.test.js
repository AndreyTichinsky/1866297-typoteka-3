"use strict";
const express = require(`express`);
const request = require(`supertest`);

const articles = require(`./articles`);
const DataService = require(`../data-service/article`);
const CommentsService = require(`../data-service/comments`);
const {HttpCode} = require(`../../constants`);

const mockData = [
  {
    comments: [
      {
        id: `RDhSva`,
        text: `Согласен с автором! Это где ж такие красоты? Хочу такую же футболку :-) Плюсую, но слишком много буквы! Совсем немного... Планируете записать видосик на эту тему?`,
      },
      {
        id: `wQ5Pyr`,
        text: `Хочу такую же футболку :-) Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Мне кажется или я уже читал это где-то? Это где ж такие красоты? Давно не пользуюсь стационарными компьютерами. Ноутбуки победили. Согласен с автором! Плюсую, но слишком много буквы!`,
      },
      {
        id: `7kfT05`,
        text: `Планируете записать видосик на эту тему? Плюсую, но слишком много буквы!`,
      },
      {
        id: `rsEDTO`,
        text: `Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Это где ж такие красоты? Плюсую, но слишком много буквы! Давно не пользуюсь стационарными компьютерами. Ноутбуки победили.`,
      },
    ],
    id: `gFNhOS`,
    title: `Как собрать камни бесконечности`,
    createdDate: `2021-11-07T15:41:49.771Z`,
    announce:
      `Это один из лучших рок-музыкантов. Простые ежедневные упражнения помогут достичь успеха. Программировать не настолько сложно, как об этом говорят. Золотое сечение — соотношение двух величин, гармоническая пропорция.`,
    fullText:
      `Он написал больше 30 хитов. Простые ежедневные упражнения помогут достичь успеха.`,
    category: [
      `Кино`,
      `Музыка`,
      `Деревья`,
      `За жизнь`,
      `Программирование`,
      `IT`,
      `Железо`,
    ],
  },
  {
    comments: [
      {
        id: `D4hOBv`,
        text: `Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Согласен с автором! Мне кажется или я уже читал это где-то? Планируете записать видосик на эту тему? Плюсую, но слишком много буквы! Хочу такую же футболку :-)`,
      },
    ],
    id: `JKEkcO`,
    title: `Борьба с прокрастинацией`,
    createdDate: `2021-11-07T13:22:00.187Z`,
    announce:
      `Собрать камни бесконечности легко, если вы прирожденный герой. Программировать не настолько сложно, как об этом говорят. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем.`,
    fullText:
      `Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Золотое сечение — соотношение двух величин, гармоническая пропорция. Первая большая ёлка была установлена только в 1938 году. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Собрать камни бесконечности легко, если вы прирожденный герой. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Как начать действовать? Для начала просто соберитесь. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Простые ежедневные упражнения помогут достичь успеха. Это один из лучших рок-музыкантов. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Программировать не настолько сложно, как об этом говорят. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Он написал больше 30 хитов. Достичь успеха помогут ежедневные повторения. Из под его пера вышло 8 платиновых альбомов.`,
    category: [`Железо`, `Программирование`, `Деревья`],
  },
  {
    comments: [
      {
        id: `MfjPjY`,
        text: `Хочу такую же футболку :-) Мне кажется или я уже читал это где-то? Давно не пользуюсь стационарными компьютерами. Ноутбуки победили. Согласен с автором! Планируете записать видосик на эту тему? Плюсую, но слишком много буквы! Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Это где ж такие красоты?`,
      },
      {
        id: `E43bGs`,
        text: `Совсем немного... Мне кажется или я уже читал это где-то? Это где ж такие красоты? Планируете записать видосик на эту тему? Согласен с автором! Плюсую, но слишком много буквы! Давно не пользуюсь стационарными компьютерами. Ноутбуки победили.`,
      },
    ],
    id: `Ft9qBF`,
    title: `Лучшие рок-музыканты 20-века`,
    createdDate: `2021-12-21T04:42:14.988Z`,
    announce:
      `Как начать действовать? Для начала просто соберитесь. Собрать камни бесконечности легко, если вы прирожденный герой. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Первая большая ёлка была установлена только в 1938 году.`,
    fullText:
      `Золотое сечение — соотношение двух величин, гармоническая пропорция. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Программировать не настолько сложно, как об этом говорят.`,
    category: [
      `Кино`,
      `Без рамки`,
      `Программирование`,
      `Железо`,
      `Деревья`,
      `IT`,
    ],
  },
  {
    comments: [
      {
        id: `zx1G9h`,
        text: `Плюсую, но слишком много буквы! Давно не пользуюсь стационарными компьютерами. Ноутбуки победили.`,
      },
      {
        id: `h0FAwQ`,
        text: `Плюсую, но слишком много буквы! Это где ж такие красоты?`,
      },
    ],
    id: `jAax4l`,
    title: `Как перестать беспокоиться и начать жить`,
    createdDate: `2021-11-20T04:12:08.053Z`,
    announce:
      `Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много.`,
    fullText:
      `Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Ёлки — это не просто красивое дерево. Это прочная древесина. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Он написал больше 30 хитов. Простые ежедневные упражнения помогут достичь успеха. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Собрать камни бесконечности легко, если вы прирожденный герой. Как начать действовать? Для начала просто соберитесь. Это один из лучших рок-музыкантов. Программировать не настолько сложно, как об этом говорят. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры.`,
    category: [`За жизнь`, `IT`, `Программирование`],
  },
  {
    comments: [
      {
        id: `pYB_4m`,
        text: `Хочу такую же футболку :-) Это где ж такие красоты? Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Планируете записать видосик на эту тему?`,
      },
      {
        id: `P95u00`,
        text: `Планируете записать видосик на эту тему? Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Это где ж такие красоты? Хочу такую же футболку :-) Согласен с автором! Мне кажется или я уже читал это где-то? Плюсую, но слишком много буквы! Совсем немного... Давно не пользуюсь стационарными компьютерами. Ноутбуки победили.`,
      },
      {
        id: `ece-XF`,
        text: `Совсем немного...`,
      },
    ],
    id: `I7U7dw`,
    title: `Самый лучший музыкальный альбом этого года`,
    createdDate: `2021-12-21T20:27:40.987Z`,
    announce:
      `Он написал больше 30 хитов. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать.`,
    fullText:
      `Как начать действовать? Для начала просто соберитесь. Достичь успеха помогут ежедневные повторения. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Это один из лучших рок-музыкантов. Первая большая ёлка была установлена только в 1938 году. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Ёлки — это не просто красивое дерево. Это прочная древесина. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Золотое сечение — соотношение двух величин, гармоническая пропорция. Простые ежедневные упражнения помогут достичь успеха. Собрать камни бесконечности легко, если вы прирожденный герой. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Программировать не настолько сложно, как об этом говорят. Вы можете достичь всего. Стоит только немного постараться и запастись книгами.`,
    category: [`Без рамки`],
  },
];

const createAPI = () => {
  const app = express();
  const cloneData = JSON.parse(JSON.stringify(mockData));
  app.use(express.json());
  articles(app, new DataService(cloneData), new CommentsService());
  return app;
};

describe(`API возвращает список публикаций`, () => {
  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).get(`/articles`);
  });

  test(`Статус код 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`Возвращает список из 5 публикаций`, () =>
    expect(response.body.length).toBe(5));

  test(`id первой публикации "gFNhOS"`, () =>
    expect(response.body[0].id).toBe(`gFNhOS`));
});

describe(`API возвращает публикацию по id`, () => {
  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).get(`/articles/gFNhOS`);
  });

  test(`Статус код 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`Заголовок публикации "Как собрать камни бесконечности"`, () =>
    expect(response.body.title).toBe(`Как собрать камни бесконечности`));
});

describe(`API создает публикацию если переданные данные валидны`, () => {
  const newArticle = {
    title: `Учим HTML и CSS`,
    createdDate: new Date().toISOString(),
    category: [`Программирование`, `IT`],
    announce: `Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами.`,
  };

  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).post(`/articles`).send(newArticle);
  });

  test(`Статус код 201`, () =>
    expect(response.statusCode).toBe(HttpCode.CREATED));

  test(`Возвращает созданную публикацию`, () =>
    expect(response.body).toEqual(expect.objectContaining(newArticle)));

  test(`Количество публикаций изменено`, () =>
    request(app)
      .get(`/articles`)
      .expect((res) => expect(res.body.length).toBe(6)));
});

describe(`API не позволяет создать публикацию с не валидными данными`, () => {
  const newArticle = {
    title: `Учим HTML и CSS`,
    createdDate: new Date().toISOString(),
    category: [`Программирование`, `IT`],
    announce: `Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами.`,
  };

  const app = createAPI();

  test(`Если не передано какое-либо обязательное поле возвращает 400`, async () => {
    for (const key of Object.keys(newArticle)) {
      const badArticle = {...newArticle};
      delete badArticle[key];
      await request(app)
        .post(`/articles`)
        .send(badArticle)
        .expect(HttpCode.BAD_REQUEST);
    }
  });
});

describe(`API изменяет существующую публикацию`, () => {
  const newArticle = {
    id: `gFNhOS`,
    title: `Как собрать камни бесконечности без регистрации и смс`,
    createdDate: `2021-11-07T15:41:49.771Z`,
    announce: `Это один из лучших рок-музыкантов. Простые ежедневные упражнения помогут достичь успеха. Программировать не настолько сложно, как об этом говорят. Золотое сечение — соотношение двух величин, гармоническая пропорция.`,
    category: [
      `Кино`,
      `Музыка`,
      `Деревья`,
      `За жизнь`,
      `Программирование`,
      `IT`,
      `Железо`,
    ],
  };

  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).put(`/articles/gFNhOS`).send(newArticle);
  });

  test(`Статус код 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`Возвращает измененную публикацию`, () =>
    expect(response.body).toEqual(expect.objectContaining(newArticle)));

  test(`Публикация была изменена`, () =>
    request(app)
      .get(`/articles/gFNhOS`)
      .expect((res) =>
        expect(res.body.title).toBe(
            `Как собрать камни бесконечности без регистрации и смс`
        )
      ));
});

test(`API возвращает код ответа 404 во время попытки изменить не существующую публикацию`, () => {
  const app = createAPI();

  const validArticle = {
    title: `Что такое золотое сечение`,
    createdDate: `2021-11-21T12:20:03.495Z`,
    announce:
      `Собрать камни бесконечности легко, если вы прирожденный герой. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Программировать не настолько сложно, как об этом говорят. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле?`,
    category: [
      `IT`,
      `Деревья`,
      `Разное`,
      `Кино`,
      `Железо`,
      `Без рамки`,
      `Программирование`,
      `За жизнь`,
    ],
  };

  return request(app)
    .put(`/articles/NOEXST`)
    .send(validArticle)
    .expect(HttpCode.NOT_FOUND);
});

test(`API возвращает код ответа 400 во время попытки изменить публикацию не валидными данными`, () => {
  const app = createAPI();

  const invalidArticle = {
    title: `Что такое золотое сечение`,
    createdDate: `2021-11-21T12:20:03.495Z`,
  };

  return request(app)
    .put(`/articles/gFNhOS`)
    .send(invalidArticle)
    .expect(HttpCode.BAD_REQUEST);
});

describe(`API корректно удаляет публикацию по id`, () => {
  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).delete(`/articles/gFNhOS`);
  });

  test(`Статус код 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`Возвращает удаленную публикацию`, () => expect(response.body.id).toBe(`gFNhOS`));

  test(`Количество публикаций стало 4`, () =>
    request(app)
      .get(`/articles`)
      .expect((res) => expect(res.body.length).toBe(4)));
});

test(`API возвращает 404 на попытку удалить не существующую публикацию`, () => {
  const app = createAPI();

  return request(app).delete(`/articles/NOEXST`).expect(HttpCode.NOT_FOUND);
});

test(`API возвращает 404 на попытку создать новый комментарий к не существующей публикации`, () => {
  const app = createAPI();

  return request(app)
    .post(`/articles/NOEXST/comments`)
    .send({
      text: `Неважно`,
    })
    .expect(HttpCode.NOT_FOUND);
});

test(`API не позволяет удалить комментарий к не существующей публикации`, () => {
  const app = createAPI();

  return request(app)
    .delete(`/articles/NOEXST/comments/RDhSva`)
    .expect(HttpCode.NOT_FOUND);
});

test(`API не позволяет удалить не существующий комментарий`, () => {
  const app = createAPI();

  return request(app)
    .delete(`/articles/gFNhOS/comments/NOEXST`)
    .expect(HttpCode.NOT_FOUND);
});

describe(`API возвращает список комментариев к публикации`, () => {
  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).get(`/articles/gFNhOS/comments`);
  });

  test(`Статус код 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`Возвращает список из 4 комментариев`, () =>
    expect(response.body.length).toBe(4));

  test(`id первого комментария "RDhSva"`, () =>
    expect(response.body[0].id).toBe(`RDhSva`));
});

describe(`API создаёт комментарий если данные валидны`, () => {
  const newComment = {
    text: `Валидному комментарию достаточно этого поля`,
  };
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .post(`/articles/gFNhOS/comments`)
      .send(newComment);
  });

  test(`Статус код 201`, () =>
    expect(response.statusCode).toBe(HttpCode.CREATED));

  test(`Возвращает созданный комментарий`, () =>
    expect(response.body).toEqual(expect.objectContaining(newComment)));

  test(`Количество комментариев изменено`, () =>
    request(app)
      .get(`/articles/gFNhOS/comments`)
      .expect((res) => expect(res.body.length).toBe(5)));
});

test(`API возвращает код статуса 400 при попытке создать не валидный комментарий`, () => {
  const app = createAPI();

  return request(app)
    .post(`/articles/gFNhOS/comments`)
    .send({})
    .expect(HttpCode.BAD_REQUEST);
});

describe(`API корректно удаляет комментарий`, () => {
  const app = createAPI();

  let response;

  beforeAll(async () => {
    response = await request(app).delete(`/articles/gFNhOS/comments/RDhSva`);
  });

  test(`Статус код 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`Возвращает удаленный комментарий`, () =>
    expect(response.body.id).toBe(`RDhSva`));

  test(`Количество комментариев стало 3`, () =>
    request(app)
      .get(`/articles/gFNhOS/comments`)
      .expect((res) => expect(res.body.length).toBe(3)));
});
